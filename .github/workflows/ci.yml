name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: bookverse_test
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_PASSWORD: password
          MYSQL_USER: bookverse_user
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, zip, gd, curl, bcmath, soap, redis
        coverage: xdebug

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install Composer dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Copy .env.example to .env
      run: cp .env.example .env

    - name: Generate app key
      run: php artisan key:generate

    - name: Generate JWT secret
      run: php artisan jwt:secret

    - name: Set directory permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Configure testing environment
      run: |
        echo "APP_ENV=testing" >> .env
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=bookverse_test" >> .env
        echo "DB_USERNAME=bookverse_user" >> .env
        echo "DB_PASSWORD=password" >> .env
        echo "REDIS_HOST=127.0.0.1" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "QUEUE_CONNECTION=sync" >> .env
        echo "CACHE_STORE=array" >> .env
        echo "SESSION_DRIVER=array" >> .env
        echo "MAIL_MAILER=array" >> .env
        echo "HUGGINGFACE_API_KEY=test_api_key_123" >> .env

    - name: Create database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u bookverse_user -ppassword -e "CREATE DATABASE IF NOT EXISTS bookverse_test;"

    - name: Run migrations
      run: php artisan migrate --force

    - name: Run php artisan test
      run: php artisan test

    - name: Install PHP_CodeSniffer
      run: composer require --dev squizlabs/php_codesniffer

    - name: Run PHP_CodeSniffer with PSR12
      run: ./vendor/bin/phpcs --standard=PSR12 app/

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run Laravel Pint
      run: ./vendor/bin/pint --test

    - name: Run PHPStan
      run: ./vendor/bin/phpstan analyse --level=8

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run security check
      run: ./vendor/bin/security-checker security:check composer.lock 