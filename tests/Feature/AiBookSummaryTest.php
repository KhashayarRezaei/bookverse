<?php

namespace Tests\Feature;

use App\Jobs\GenerateBookSummaryJob;
use App\Models\Book;
use App\Models\User;
use App\Services\AiSummaryService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Queue;
use Tests\TestCase;

class AiBookSummaryTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected User $user;
    protected User $adminUser;
    protected Book $book;

    protected function setUp(): void
    {
        parent::setUp();
        
        // Create test users
        $this->user = User::factory()->create();
        $this->adminUser = User::factory()->create(['is_admin' => true]);
        
        // Create a test book
        $this->book = Book::factory()->create([
            'title' => 'Test Book',
            'author' => 'Test Author',
            'description' => 'This is a test book description for AI summary generation.',
            'price' => 19.99,
            'published_year' => 2023,
            'isbn' => '1234567890123'
        ]);

        // Clear cache before each test
        Cache::flush();
        
        // Fake the queue
        Queue::fake();
    }

    /** @test */
    public function authenticated_user_can_get_book_summary()
    {
        $response = $this->actingAs($this->user)
            ->getJson("/api/books/{$this->book->id}/summary");

        $response->assertStatus(200)
            ->assertJsonStructure([
                'message',
                'summary' => [
                    'status',
                    'content',
                    'generated_at'
                ]
            ])
            ->assertJson([
                'summary' => [
                    'status' => 'processing'
                ]
            ]);

        // Assert that the job was dispatched
        Queue::assertPushed(GenerateBookSummaryJob::class, function ($job) {
            return $job->book->id === $this->book->id;
        });
    }

    /** @test */
    public function unauthenticated_user_cannot_get_book_summary()
    {
        $response = $this->getJson("/api/books/{$this->book->id}/summary");

        $response->assertStatus(401)
            ->assertJson(['message' => 'Unauthenticated.']);
    }

    /** @test */
    public function summary_endpoint_returns_404_for_nonexistent_book()
    {
        $response = $this->actingAs($this->user)
            ->getJson("/api/books/99999/summary");

        $response->assertStatus(404)
            ->assertJson(['message' => 'Book not found.']);
    }

    /** @test */
    public function summary_endpoint_returns_cached_summary_when_available()
    {
        $cachedSummary = [
            'status' => 'completed',
            'content' => 'This is a cached summary of the test book.',
            'generated_at' => now()->toISOString(),
            'word_count' => 15,
            'reading_time' => 1
        ];

        Cache::put("book_summary_{$this->book->id}", $cachedSummary, 3600);

        $response = $this->actingAs($this->user)
            ->getJson("/api/books/{$this->book->id}/summary");

        $response->assertStatus(200)
            ->assertJson([
                'message' => 'Summary retrieved successfully.',
                'summary' => $cachedSummary
            ]);

        // Assert that no job was dispatched since summary was cached
        Queue::assertNotPushed(GenerateBookSummaryJob::class);
    }

    /** @test */
    public function ai_book_summary_service_calls_hugging_face_api()
    {
        Http::fake([
            'https://api-inference.huggingface.co/models/gpt2' => Http::response([
                [
                    'generated_text' => 'Title: Test Book\nAuthor: Test Author\nDescription: This is a test book description for AI summary generation.\nGenerate a concise summary: This is a test summary generated by the AI model.'
                ]
            ], 200)
        ]);

        $aiService = app(AiSummaryService::class);
        $summary = $aiService->generateSummary($this->book);

        $this->assertIsArray($summary);
        $this->assertArrayHasKey('status', $summary);
        $this->assertArrayHasKey('content', $summary);
        $this->assertEquals('completed', $summary['status']);

        // Assert that the API was called
        Http::assertSent(function ($request) {
            return $request->url() === 'https://api-inference.huggingface.co/models/gpt2' &&
                   $request->method() === 'POST' &&
                   $request->hasHeader('Authorization', 'Bearer test_api_key_123');
        });
    }

    /** @test */
    public function ai_book_summary_service_uses_correct_api_endpoint()
    {
        Http::fake([
            'https://api-inference.huggingface.co/models/gpt2' => Http::response([
                [
                    'generated_text' => 'Title: Test Book\nAuthor: Test Author\nDescription: This is a test book description for AI summary generation.\nGenerate a concise summary: Test summary'
                ]
            ], 200)
        ]);

        $aiService = app(AiSummaryService::class);
        $aiService->generateSummary($this->book);

        Http::assertSent(function ($request) {
            return $request->url() === 'https://api-inference.huggingface.co/models/gpt2';
        });
    }

    /** @test */
    public function ai_book_summary_service_includes_api_key_in_headers()
    {
        config(['services.huggingface.api_key' => 'test_api_key_123']);

        Http::fake([
            'https://api-inference.huggingface.co/models/gpt2' => Http::response([
                [
                    'generated_text' => 'Title: Test Book\nAuthor: Test Author\nDescription: This is a test book description for AI summary generation.\nGenerate a concise summary: Test summary'
                ]
            ], 200)
        ]);

        $aiService = app(AiSummaryService::class);
        $aiService->generateSummary($this->book);

        Http::assertSent(function ($request) {
            return $request->hasHeader('Authorization', 'Bearer test_api_key_123') &&
                   $request->hasHeader('Content-Type', 'application/json');
        });
    }

    /** @test */
    public function generate_book_summary_job_stores_summary_in_cache()
    {
        $job = new GenerateBookSummaryJob($this->book);
        
        // Mock the AI service
        $this->mock(AiSummaryService::class, function ($mock) {
            $mock->shouldReceive('generateSummary')
                ->once()
                ->andReturn([
                    'status' => 'completed',
                    'content' => 'This is a test summary generated by the job.',
                    'generated_at' => now()->toISOString(),
                    'word_count' => 12,
                    'reading_time' => 1
                ]);
        });

        $job->handle();

        // Assert that summary was cached
        $this->assertTrue(Cache::has("book_summary_{$this->book->id}"));
        
        $cachedSummary = Cache::get("book_summary_{$this->book->id}");
        $this->assertEquals('completed', $cachedSummary['status']);
        $this->assertEquals('This is a test summary generated by the job.', $cachedSummary['content']);
    }

    /** @test */
    public function generate_book_summary_job_handles_api_errors_gracefully()
    {
        $job = new GenerateBookSummaryJob($this->book);
        
        // Mock the AI service to return an error
        $this->mock(AiSummaryService::class, function ($mock) {
            $mock->shouldReceive('generateSummary')
                ->once()
                ->andReturn([
                    'status' => 'error',
                    'content' => 'Failed to generate summary due to API error.',
                    'error' => 'API timeout'
                ]);
        });

        $job->handle();

        // Assert that error summary was cached
        $this->assertTrue(Cache::has("book_summary_{$this->book->id}"));
        
        $cachedSummary = Cache::get("book_summary_{$this->book->id}");
        $this->assertEquals('error', $cachedSummary['status']);
        $this->assertArrayHasKey('error', $cachedSummary);
    }

    /** @test */
    public function summary_cache_expires_after_24_hours()
    {
        $summary = [
            'status' => 'completed',
            'content' => 'Test summary',
            'generated_at' => now()->toISOString()
        ];

        Cache::put("book_summary_{$this->book->id}", $summary, 86400);

        // Assert cache exists
        $this->assertTrue(Cache::has("book_summary_{$this->book->id}"));

        // Travel 24 hours and 1 minute into the future
        $this->travel(1441)->minutes();

        // Assert cache has expired
        $this->assertFalse(Cache::has("book_summary_{$this->book->id}"));

        $this->travelBack();
    }

    /** @test */
    public function multiple_users_can_access_same_book_summary()
    {
        $summary = [
            'status' => 'completed',
            'content' => 'Shared summary for multiple users.',
            'generated_at' => now()->toISOString()
        ];

        Cache::put("book_summary_{$this->book->id}", $summary, 86400);

        // First user
        $response1 = $this->actingAs($this->user)
            ->getJson("/api/books/{$this->book->id}/summary");

        $response1->assertStatus(200)
            ->assertJson([
                'summary' => $summary
            ]);

        // Second user
        $user2 = User::factory()->create();
        $response2 = $this->actingAs($user2)
            ->getJson("/api/books/{$this->book->id}/summary");

        $response2->assertStatus(200)
            ->assertJson([
                'summary' => $summary
            ]);

        // Assert that both users got the same cached summary
        $this->assertEquals($response1->json('summary'), $response2->json('summary'));
    }

    /** @test */
    public function summary_endpoint_returns_processing_message_when_no_cache()
    {
        $response = $this->actingAs($this->user)
            ->getJson("/api/books/{$this->book->id}/summary");

        $response->assertStatus(200)
            ->assertJson([
                'message' => 'Generating summary. Please try again in a few moments.',
                'summary' => [
                    'status' => 'processing',
                    'content' => null,
                    'generated_at' => null
                ]
            ]);

        // Assert that job was dispatched
        Queue::assertPushed(GenerateBookSummaryJob::class);
    }

    /** @test */
    public function summary_endpoint_handles_long_book_descriptions()
    {
        $longDescription = str_repeat('This is a very long book description. ', 100);
        
        $bookWithLongDescription = Book::factory()->create([
            'title' => 'Long Book',
            'author' => 'Long Author',
            'description' => $longDescription,
            'price' => 29.99
        ]);

        $response = $this->actingAs($this->user)
            ->getJson("/api/books/{$bookWithLongDescription->id}/summary");

        $response->assertStatus(200)
            ->assertJsonStructure([
                'message',
                'summary' => [
                    'status',
                    'content',
                    'generated_at'
                ]
            ]);

        // Assert that job was dispatched for long description
        Queue::assertPushed(GenerateBookSummaryJob::class, function ($job) use ($bookWithLongDescription) {
            return $job->book->id === $bookWithLongDescription->id;
        });
    }
} 